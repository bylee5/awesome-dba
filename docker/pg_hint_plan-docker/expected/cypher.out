CREATE graph g;
CREATE TABLE t AS SELECT n AS id FROM generate_series(1,100) AS p(n);
LOAD FROM t AS id
CREATE (:v1 = to_jsonb(row_to_json(id)))-[:e1]->(:v2 = to_jsonb(row_to_json(id)));
EXPLAIN MATCH (a:v1)-[b:e1]->(c:v2) RETURN *;
                                QUERY PLAN                                 
---------------------------------------------------------------------------
 Hash Join  (cost=74.00..118.17 rows=970 width=96)
   Hash Cond: (b."end" = c.id)
   ->  Hash Join  (cost=37.00..68.94 rows=970 width=108)
         Hash Cond: (b.start = a.id)
         ->  Seq Scan on e1 b  (cost=0.00..19.70 rows=970 width=62)
         ->  Hash  (cost=22.00..22.00 rows=1200 width=46)
               ->  Seq Scan on v1 a  (cost=0.00..22.00 rows=1200 width=46)
   ->  Hash  (cost=22.00..22.00 rows=1200 width=46)
         ->  Seq Scan on v2 c  (cost=0.00..22.00 rows=1200 width=46)
(9 rows)

/*+ 
    NestLoop(a b c)
*/
EXPLAIN MATCH (a:v1)-[b:e1]->(c:v2) RETURN *;
                                QUERY PLAN                                 
---------------------------------------------------------------------------
 Nested Loop  (cost=37.15..281.77 rows=970 width=96)
   ->  Hash Join  (cost=37.00..68.94 rows=970 width=108)
         Hash Cond: (b.start = a.id)
         ->  Seq Scan on e1 b  (cost=0.00..19.70 rows=970 width=62)
         ->  Hash  (cost=22.00..22.00 rows=1200 width=46)
               ->  Seq Scan on v1 a  (cost=0.00..22.00 rows=1200 width=46)
   ->  Index Scan using v2_pkey on v2 c  (cost=0.15..0.22 rows=1 width=46)
         Index Cond: (id = b."end")
(8 rows)

